// Mocks generated by Mockito 5.4.5 from annotations
// in wpgg/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:stacked_services/stacked_services.dart' as _i7;
import 'package:wpgg/models/account.dto.dart' as _i2;
import 'package:wpgg/models/gameplay_recommendation.dto.dart' as _i6;
import 'package:wpgg/models/match_summary.dto.dart' as _i15;
import 'package:wpgg/models/player_rank.dto.dart' as _i5;
import 'package:wpgg/models/profile_account.dto.dart' as _i3;
import 'package:wpgg/models/stats.dto.dart' as _i4;
import 'package:wpgg/services/backend_api_service.dart' as _i13;
import 'package:wpgg/services/ddragon_service.dart' as _i17;
import 'package:wpgg/services/env_service.dart' as _i12;
import 'package:wpgg/services/riot_api_service.dart' as _i14;
import 'package:wpgg/services/secure_storage_service.dart' as _i16;
import 'package:wpgg/services/theme_service.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountDTO_1 extends _i1.SmartFake implements _i2.AccountDTO {
  _FakeAccountDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileAccountDTO_2 extends _i1.SmartFake
    implements _i3.ProfileAccountDTO {
  _FakeProfileAccountDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStatsDTO_3 extends _i1.SmartFake implements _i4.StatsDTO {
  _FakeStatsDTO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerRankDTO_4 extends _i1.SmartFake implements _i5.PlayerRankDTO {
  _FakePlayerRankDTO_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameplayRecommendationDTO_5 extends _i1.SmartFake
    implements _i6.GameplayRecommendationDTO {
  _FakeGameplayRecommendationDTO_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i9.GlobalKey<_i9.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i9.GlobalKey<_i9.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i7.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = '',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = '',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i9.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? navigateToView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i9.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i7.Transition? transition,
    _i7.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i9.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i7.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i7.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = 'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<dynamic>?>);

  @override
  _i10.Future<_i7.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = '',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.SheetResponse<T>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<T>?>);

  @override
  void completeSheet(_i7.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i7.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i7.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i9.Widget Function(
      _i9.BuildContext,
      _i7.DialogRequest<dynamic>,
      dynamic Function(_i7.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i11.Color? cancelTitleColor,
    String? buttonTitle = 'Ok',
    _i11.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i9.RouteSettings? routeSettings,
    _i9.GlobalKey<_i9.NavigatorState>? navigatorKey,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  _i10.Future<_i7.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = '',
    bool? useSafeArea = true,
    _i9.RouteSettings? routeSettings,
    _i9.GlobalKey<_i9.NavigatorState>? navigatorKey,
    _i9.RouteTransitionsBuilder? transitionBuilder,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #transitionBuilder: transitionBuilder,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.DialogResponse<T>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<T>?>);

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = 'Cancel',
    _i11.Color? cancelTitleColor,
    String? confirmationTitle = 'Ok',
    _i11.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i9.RouteSettings? routeSettings,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i7.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EnvService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvService extends _i1.Mock implements _i12.EnvService {
  @override
  String get backendUrl => (super.noSuchMethod(
        Invocation.getter(#backendUrl),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#backendUrl),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#backendUrl),
        ),
      ) as String);

  @override
  String get backendProtocol => (super.noSuchMethod(
        Invocation.getter(#backendProtocol),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#backendProtocol),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#backendProtocol),
        ),
      ) as String);

  @override
  String? getEnvironmentVar(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getEnvironmentVar,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as String?);
}

/// A class which mocks [BackendApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackendApiService extends _i1.Mock implements _i13.BackendApiService {
  @override
  Duration get timeoutTime => (super.noSuchMethod(
        Invocation.getter(#timeoutTime),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timeoutTime),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#timeoutTime),
        ),
      ) as Duration);

  @override
  _i10.Future<dynamic> get(
    String? path, {
    Map<String, String>? queryParameters,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> post(
    String? path, {
    Map<String, String>? queryParameters,
    Map<String, dynamic>? payload = const {},
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #queryParameters: queryParameters,
            #payload: payload,
            #headers: headers,
          },
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RiotApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiotApiService extends _i1.Mock implements _i14.RiotApiService {
  @override
  _i10.Future<_i2.AccountDTO> fetchAccount(String? puuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAccount,
          [puuid],
        ),
        returnValue: _i10.Future<_i2.AccountDTO>.value(_FakeAccountDTO_1(
          this,
          Invocation.method(
            #fetchAccount,
            [puuid],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.AccountDTO>.value(_FakeAccountDTO_1(
          this,
          Invocation.method(
            #fetchAccount,
            [puuid],
          ),
        )),
      ) as _i10.Future<_i2.AccountDTO>);

  @override
  _i10.Future<_i2.AccountDTO> fetchAccountByRiotId(
    String? gameName,
    String? tagLine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAccountByRiotId,
          [
            gameName,
            tagLine,
          ],
        ),
        returnValue: _i10.Future<_i2.AccountDTO>.value(_FakeAccountDTO_1(
          this,
          Invocation.method(
            #fetchAccountByRiotId,
            [
              gameName,
              tagLine,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.AccountDTO>.value(_FakeAccountDTO_1(
          this,
          Invocation.method(
            #fetchAccountByRiotId,
            [
              gameName,
              tagLine,
            ],
          ),
        )),
      ) as _i10.Future<_i2.AccountDTO>);

  @override
  _i10.Future<_i3.ProfileAccountDTO> fetchProfileAccount(String? puuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfileAccount,
          [puuid],
        ),
        returnValue:
            _i10.Future<_i3.ProfileAccountDTO>.value(_FakeProfileAccountDTO_2(
          this,
          Invocation.method(
            #fetchProfileAccount,
            [puuid],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.ProfileAccountDTO>.value(_FakeProfileAccountDTO_2(
          this,
          Invocation.method(
            #fetchProfileAccount,
            [puuid],
          ),
        )),
      ) as _i10.Future<_i3.ProfileAccountDTO>);

  @override
  _i10.Future<List<_i15.MatchSummaryDTO>> fetchMatches(String? puuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMatches,
          [puuid],
        ),
        returnValue: _i10.Future<List<_i15.MatchSummaryDTO>>.value(
            <_i15.MatchSummaryDTO>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i15.MatchSummaryDTO>>.value(
                <_i15.MatchSummaryDTO>[]),
      ) as _i10.Future<List<_i15.MatchSummaryDTO>>);

  @override
  _i10.Future<_i4.StatsDTO> fetchStats(String? puuid) => (super.noSuchMethod(
        Invocation.method(
          #fetchStats,
          [puuid],
        ),
        returnValue: _i10.Future<_i4.StatsDTO>.value(_FakeStatsDTO_3(
          this,
          Invocation.method(
            #fetchStats,
            [puuid],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.StatsDTO>.value(_FakeStatsDTO_3(
          this,
          Invocation.method(
            #fetchStats,
            [puuid],
          ),
        )),
      ) as _i10.Future<_i4.StatsDTO>);

  @override
  _i10.Future<_i5.PlayerRankDTO> fetchRanks(String? puuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRanks,
          [puuid],
        ),
        returnValue: _i10.Future<_i5.PlayerRankDTO>.value(_FakePlayerRankDTO_4(
          this,
          Invocation.method(
            #fetchRanks,
            [puuid],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.PlayerRankDTO>.value(_FakePlayerRankDTO_4(
          this,
          Invocation.method(
            #fetchRanks,
            [puuid],
          ),
        )),
      ) as _i10.Future<_i5.PlayerRankDTO>);

  @override
  _i10.Future<_i6.GameplayRecommendationDTO> fetchRecommendation(
          _i4.StatsDTO? stats) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRecommendation,
          [stats],
        ),
        returnValue: _i10.Future<_i6.GameplayRecommendationDTO>.value(
            _FakeGameplayRecommendationDTO_5(
          this,
          Invocation.method(
            #fetchRecommendation,
            [stats],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.GameplayRecommendationDTO>.value(
                _FakeGameplayRecommendationDTO_5(
          this,
          Invocation.method(
            #fetchRecommendation,
            [stats],
          ),
        )),
      ) as _i10.Future<_i6.GameplayRecommendationDTO>);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i16.SecureStorageService {
  @override
  _i10.Future<void> write(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [
            key,
            value,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<String?> read(String? key) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [key],
        ),
        returnValue: _i10.Future<String?>.value(),
        returnValueForMissingStub: _i10.Future<String?>.value(),
      ) as _i10.Future<String?>);

  @override
  _i10.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> writeJson(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeJson,
          [
            key,
            value,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<dynamic> readJson(String? key) => (super.noSuchMethod(
        Invocation.method(
          #readJson,
          [key],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);
}

/// A class which mocks [DDragonService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDDragonService extends _i1.Mock implements _i17.DDragonService {
  @override
  _i10.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  String championIcon(String? championName) => (super.noSuchMethod(
        Invocation.method(
          #championIcon,
          [championName],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #championIcon,
            [championName],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #championIcon,
            [championName],
          ),
        ),
      ) as String);

  @override
  String profileIcon(int? id) => (super.noSuchMethod(
        Invocation.method(
          #profileIcon,
          [id],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #profileIcon,
            [id],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #profileIcon,
            [id],
          ),
        ),
      ) as String);

  @override
  String itemIcon(int? id) => (super.noSuchMethod(
        Invocation.method(
          #itemIcon,
          [id],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #itemIcon,
            [id],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #itemIcon,
            [id],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i18.ThemeService {}
